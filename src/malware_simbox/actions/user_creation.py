import platform
import logging
import win32net
import win32netcon
from malware_simbox.handler.log_handler import log_errors
from malware_simbox.actions.action import Action

class UserCreation(Action):

    def __init__(self) -> None:
        super().__init__()


    def run(self, user_name: str = "MalwareAdmin", user_pass: str = "Passw0rt!", delete_user: bool = True) -> None:
        self._create_user(user_name, user_pass)
        self._add_user_to_admin(user_name)
        self._log_user_info()
        if delete_user:
            self._delete_user(user_name)
            self._log_user_info()
        


    @log_errors
    def _create_user(self, user_name: str, user_pass: str) -> None:
        """Creates a new local user account on Windows."""
        
        user_info = {
            "name": user_name,
            "password": user_pass,
            "priv": win32netcon.USER_PRIV_USER,
            "comment": "Demo user",
            "flags": win32netcon.UF_NORMAL_ACCOUNT | win32netcon.UF_SCRIPT,
            "script_path": None
        }
        
        win32net.NetUserAdd(None, 1, user_info)


    @log_errors
    def _delete_user(self, user_name: str) -> None:
        """Deletes a local user account on Windows."""

        win32net.NetUserDel(None, user_name)


    @log_errors
    def _find_admin_group(self) -> str:
        resume = 0
        while True:
            groups, total, resume = win32net.NetLocalGroupEnum(None, 0, resume)
            for group in groups:
                name = group['name'].lower()
                if "administrators" in name or "administratoren" in name:
                    return group['name']
            if resume == 0:
                break
        

        group = groups[0]['name']
        logging.warning(f"Failed to get Admin user group. Using {group} instead")
        return group


    @log_errors
    def _add_user_to_admin(self, user_name: str) -> None:
        """Adds a user to the local administrators group."""

        if platform.system().lower() == "windows":
            admin_group = self._find_admin_group()

            member_info = {
                'domainandname': user_name
            }

            logging.info(f"Adding user \"{user_name}\" to group \"{admin_group}\"")

            win32net.NetLocalGroupAddMembers(None, admin_group, 3, [member_info])


    @log_errors
    def _log_user_info(self) -> None:
        resume = 0
        while True:
            users, total, resume = win32net.NetUserEnum(
                None,
                1,
                win32netcon.FILTER_NORMAL_ACCOUNT,
                resume
            )
            for user in users:
                logging.info(f" - {user['name']}")
            if resume == 0:
                break


