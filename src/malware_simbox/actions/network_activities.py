import socket
import threading
import time
import logging
from malware_simbox.handler.log_handler import log_errors
from malware_simbox.actions.action import Action

class NetworkActivity( Action ):

    def __init__(self) -> None:
        super().__init__()


    def run(self) -> None:
        self._create_network_activity()
        self._scan_localhost_ports()

        server_thread = self._create_local_server()
        time.sleep(1)
        self._connect_local_server()
        # Connect the server thread to validate termination
        server_thread.join()


    @log_errors
    def _create_local_server(self, port: int = 9080) -> threading.Thread:
        """Starts a simple TCP server on localhost that responds with 'ACK'."""

        # Define server creation function
        def server():
            s = socket.socket()
            s.bind(("127.0.0.1", port))
            s.listen(1)
            conn, _ = s.accept()
            conn.recv(1024)
            conn.send(b"ACK")
            conn.close()
            s.close()
        
        # Start server as thread
        server_thread = threading.Thread(target=server)
        server_thread.start()
        return server_thread
    

    @log_errors
    def _connect_local_server(self, port: int = 9080) -> None:
        """Connects to a local server and sends a message."""

        client = socket.socket()
        client.connect(("127.0.0.1", port))
        client.send(b"Hello")
        client.recv(1024)
        client.close()


    @log_errors
    def _create_network_activity(self) -> None:
        """Creates a fake HTTP GET request to simulate network activity."""

        fake_server = "www.google.com"
        fake_port = 80

        # Resolve hostname to IP address
        fake_ip = socket.gethostbyname(fake_server)

        logging.info(f"Received IP of {fake_server}: {fake_ip}")
        
        # Establish TCP connection to the server
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((fake_ip, fake_port))

        # Prepare the GET request with proper formatting
        request = "GET / HTTP/1.1\r\nHost: {}\r\n\r\n".format(fake_server)

        # Send encoded
        s.send(request.encode("utf-8"))
        s.close()


    @log_errors
    def _scan_localhost_ports(self, start_port: int = 80, end_port: int = 85):
        """Scans a range of localhost ports to identify open ones."""
        
        for port in range(start_port, end_port):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(1)

            result = s.connect_ex(("127.0.0.1", port))
            if result == 0:
                logging.info(f"Port {port} is open")
            s.close()
